{"version":3,"sources":["Components/TodoForm.js","Components/Todo.js","Components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","type","name","placeholder","onChange","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAoEeA,MAlEf,SAAkBC,GACd,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAO,IAAlE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAGhBW,EAAe,SAAAF,GACjBA,EAAEG,iBAEFf,EAAMgB,SAAS,CACbC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UAClBC,KAAMjB,IAGVC,EAAS,KAIb,OACG,sBAAMiB,UAAU,YAAYN,SAAYF,EAAxC,SACEd,EAAME,KACH,qCACA,uBACAqB,KAAK,OACLC,KAAK,OACLrB,MAASC,EACTqB,YAAY,mBACZH,UAAU,kBACVI,SAAYf,EACZgB,IAAOrB,IAER,wBAAQgB,UAAU,mBACbM,QAAWd,EADhB,uBAMC,qCACA,uBACAS,KAAK,OACLC,KAAK,OACLrB,MAASC,EACTqB,YAAY,oBACZH,UAAU,aACVI,SAAYf,EACZgB,IAAOrB,IAER,wBAAQgB,UAAU,cACbM,QAAWd,EADhB,4B,sBCVIe,MAxCf,YAA+D,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC5C,EAAwBhC,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAagC,EAAb,KAaA,OAAGhC,EAAKe,GACG,cAAC,EAAD,CAAUf,KAAMA,EAAMc,SATZ,SAAAb,GACjB8B,EAAW/B,EAAKe,GAAId,GACpB+B,EAAQ,CACJjB,GAAK,KACLd,MAAO,QAQR2B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBACEf,UAAWc,EAAKE,WAAa,oBAAsB,WADrD,UAIE,qBAAmBV,QAAS,kBAAMG,EAAaK,EAAKnB,KAApD,SACGmB,EAAKf,MADEe,EAAKnB,IAGf,sBAAKK,UAAU,QAAf,UACE,cAAC,IAAD,CACEM,QAAS,kBAAMI,EAAWI,EAAKnB,KAC/BK,UAAU,gBAEZ,cAAC,IAAD,CACEM,QAAS,kBAAMM,EAAQ,CAAEjB,GAAImB,EAAKnB,GAAId,MAAOiC,EAAKf,QAClDC,UAAU,mBAZTe,OC6BAE,MApDf,WACI,MAA0BtC,mBAAS,IAAnC,mBAAO6B,EAAP,KAAcU,EAAd,KAoCA,OACI,gCACI,6DACA,cAAC,EAAD,CAAUxB,SArCF,SAAAoB,GACZ,GAAIA,EAAKf,OAAS,QAAQoB,KAAKL,EAAKf,MAApC,CAIA,IAAMqB,EAAQ,CAAIN,GAAJ,mBAAaN,IAE3BU,EAASE,OA+BL,cAAC,EAAD,CACIZ,MAAOA,EACPC,aAhBS,SAAAd,GACjB,IAAI0B,EAAeb,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKnB,KAAOA,IACXmB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXI,EAASG,IAUDX,WA/BO,SAAAf,GACf,IAAM2B,EAAW,YAAId,GAAOe,QAAO,SAAAT,GAAI,OAAIA,EAAKnB,KAAOA,KAEvDuB,EAASI,IA6BDX,WA1BO,SAACa,EAAQC,GACnBA,EAAS1B,OAAQ,QAAQoB,KAAKM,EAAS1B,OAI1CmB,GAAS,SAAAQ,GAAI,OAAIA,EAAKb,KAAI,SAAAc,GAAI,OAAKA,EAAKhC,KAAO6B,EAASC,EAAWE,eCf9DC,MARf,WACE,OACE,qBAAK5B,UAAU,WAAf,SACE,cAAC,EAAD,OCJN6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b2d58287.chunk.js","sourcesContent":["import React , {useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value :'');\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(() =>{\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e =>{\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n          id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        });\r\n\r\n        setInput('');\r\n        \r\n    };\r\n\r\n    return (\r\n       <form className=\"todo-form\" onSubmit = {handleSubmit}>\r\n        {props.edit ? (\r\n            <>\r\n            <input \r\n            type=\"text\" \r\n            name=\"text\" \r\n            value = {input}\r\n            placeholder=\"Update the task:\" \r\n            className=\"todo-input edit\"\r\n            onChange = {handleChange}\r\n            ref = {inputRef}\r\n            />\r\n           <button className=\"todo-button edit\"\r\n                onClick = {handleSubmit}>\r\n                Update\r\n            </button>\r\n            </>\r\n        ) :(\r\n            <>\r\n            <input \r\n            type=\"text\" \r\n            name=\"text\" \r\n            value = {input}\r\n            placeholder=\"Add a task to do:\" \r\n            className=\"todo-input\"\r\n            onChange = {handleChange}\r\n            ref = {inputRef}\r\n            />\r\n           <button className=\"todo-button\"\r\n                onClick = {handleSubmit}>\r\n                Add task\r\n            </button>\r\n            </>\r\n        )}\r\n\r\n           \r\n       </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport TodoList from './TodoList';\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo})  {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value =>{\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id : null,\r\n            value: ''\r\n        });\r\n    };\r\n\r\n    if(edit.id){\r\n        return <TodoForm edit={edit} onSubmit = {submitUpdate}/>;\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div\r\n          className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n          key={index}\r\n        >\r\n          <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n            {todo.text}\r\n          </div>\r\n          <div className='icons'>\r\n            <RiCloseCircleLine\r\n              onClick={() => removeTodo(todo.id)}\r\n              className='delete-icon'\r\n            />\r\n            <TiEdit\r\n              onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n              className='edit-icon'\r\n            />\r\n          </div>\r\n        </div>\r\n      ));\r\n    };\r\n\r\nexport default Todo;\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo =>{\r\n        if(!todo.text  || /^\\s*$/.test(todo.text)){\r\n            return\r\n        }\r\n\r\n        const newTodos = [todo, ...todos]\r\n\r\n        setTodos(newTodos)\r\n    };\r\n\r\n    const removeTodo = id =>{\r\n        const removeArr =[...todos].filter(todo => todo.id !== id)\r\n\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) =>{\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n          }\r\n      \r\n          setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    };\r\n\r\n    const completeTodo = id =>{\r\n        let updatedTodos = todos.map(todo =>{\r\n            if(todo.id === id){\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo\r\n        })\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the plan for today ?</h1>\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo \r\n                todos={todos} \r\n                completeTodo = {completeTodo}\r\n                removeTodo = {removeTodo}\r\n                updateTodo = {updateTodo}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\nimport './App.css';\nimport TodoForm from './Components/TodoForm';\nimport TodoList from './Components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}